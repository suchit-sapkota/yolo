import time
import torch
import cv2
from picamera import PiCamera
from picamera.array import PiRGBArray

# Load YOLOv7 model (adjust to your custom model if necessary)
model = torch.hub.load('ultralytics/yolov7', 'yolov7', pretrained=False)
model.load_state_dict(torch.load('yolov7.weights'))  # Replace with your custom model path

# Initialize the PiCamera (for Raspberry Pi Camera Module)
camera = PiCamera()
camera.resolution = (640, 480)  # Adjust the resolution as needed
camera.framerate = 32
raw_capture = PiRGBArray(camera, size=(640, 480))

# Allow the camera to warm up
time.sleep(2)

# Loop for continuous capture and detection
for frame in camera.capture_continuous(raw_capture, format="bgr", use_video_port=True):
    image = frame.array  # Get the image from the camera
    
    # Perform YOLOv7 inference on the captured image
    results = model(image)
    
    # Render the results (draw bounding boxes and labels)
    results.render()
    
    # Display the frame with bounding boxes
    cv2.imshow('YOLOv7 Object Detection', results.imgs[0])
    
    # Clear the raw capture buffer for the next frame
    raw_capture.truncate(0)

    # Press 'q' to quit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources and close windows
camera.close()
cv2.destroyAllWindows()
